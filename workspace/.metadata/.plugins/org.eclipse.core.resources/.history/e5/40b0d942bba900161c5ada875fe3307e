import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class WalkingtheLongestPathApproximationProblem {
	static Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
	public static void main(String[] args){
		//input
		Scanner scan = new Scanner(System.in);
		int nNodes = scan.nextInt();
		int nEdges = scan.nextInt();
		for(int i = 0; i < nEdges; i++){
			int start = scan.nextInt();
			int end = scan.nextInt();
			if(map.containsKey(start)){
				map.get(start).add(end);
			}else{
				List<Integer> list= new ArrayList<Integer>();
				list.add(end);
				map.put(start,list);
			}
		}
		List<Integer> paths = new ArrayList<Integer>();
        Set<Integer> set = new HashSet<Integer>();
        set.add(1);
        dfs(paths, set);
	}
	
    //search all path
	/*dist[v] < dist[u] + weight(u, v)) ………………………dist[v] = dist[u] + weight(u, v) */
    private static void dfs(List<Integer> paths,Set<Integer> set){
    	for(int i = 0; i < )
    }
	
}
